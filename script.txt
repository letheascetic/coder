git commonds:

git config --global user.name "Your Name"
git config --global user.email "email@example.com"

git init						创建仓库
git add file					提交到暂存区
git commit -m  "description"	提交到版本库

git status						查看状态
git diff file					比较工作区和暂存区的文件

git log 						查看commit log
git log --pretty=oneline		单行输出

git reset --hard HEAD^			回退到上一个版本
git reset --hard HEAD^^			回退到上上个版本
git reset --hard HEAD~100		回退到上一百个版本

git reset --hard id				回退到指定id版本

git reflog						显示提交或者回退版本的记录

git diff HEAD -- file			查看工作区和版本库里面最新版本的区别

git checkout -- file			把文件在工作区的修改全部撤销:（可以恢复被误删除的文件）
									<1> file修改后还没有被放到暂存区，撤销修改就回到和版本库一模一样的状态
									<2> file修改添加到暂存区后，又作了修改，撤销修改就回到添加到暂存区后的状态

git reset HEAD file				把暂存区的修改撤销掉（unstage），重新放回工作区


	场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
	场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
	场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset --hard HEAD 工作区和暂存区均被退回至仓库中的指定版本


git rm file 					删除文件(运行后本地文件删除,仓库和暂存区中文件区commit后才删除)


ssh-keygen -t rsa -C "yizhifight@163.com"		创建SSH Key

git remote add origin git@github.com:letheascetic/git.git
	添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。
	
git push -u origin master		
	把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
	由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

git push origin master
	把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！

git clone git@github.com:michaelliao/gitskills.git				使用ssh协议拷贝远程库到本地
git clone https://github.com/letheascetic/hello-world.git		使用https拷贝远程库到本地


git checkout -b dev			创建分支dev(dev指针) 并将HEAD指针指向dev指针
							等于执行两次命令: 1 git branch dev 	2 git checkout dev

git branch dev 				创建dev分支(dev指针)
git checkout dev 			切换到dev分支 将HEAD指针指向dev指针

git branch					查看所有分支及当前所在的分支
git merge <name>			合并<name>分支到当前分支
git branch -d dev			删除dev分支

git log --graph				查看分支合并图

git merge --no-ff -m "merge with no-ff" dev		合并dev分支，--no-ff参数，表示禁用Fast forward，本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去

git stash					把当前工作现场储藏起来，等以后恢复现场后继续工作
git stash list				显示stash中存储的内容
git stash apply				恢复，但stash中内容仍存在
git stash drop				删除stash内容
git stash pop				恢复并删除stash中内容	
git stash apply stash@{0}	恢复指定的stash

git branch -d <name>		删除分支,如果分支尚未合并则不能删除
git branch -D <name>		删除分支. 无论是否已经合并

git remote					查看远程库的名字
git remote -v				远程库的详细信息

git push origin master		推送本地库master到远程库origin
git push origin dev			推送本地库dev到远程库origin

git tag v1.0				在当前库打标签
git tag v0.9 6224937		给指定commit id打标签
git tag -a v0.1 -m "version 0.1 released" 3628164			创建带有说明的标签，用-a指定标签名，-m指定说明文字
git tag -s v0.2 -m "signed version 0.2 released" fec145a	通过-s用私钥签名一个标签
git tag						显示已经打的标签
git show <tagname>			显示指定标签对应的版本信息

git tag -d v0.1				删除标签 创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除

git push origin <tagname>	推送指定标签到远程库	
git push origin --tags		一次性推送全部尚未推送到远程的本地标签

如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下
git push origin :refs/tags/v0.9






